type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String!
  email: String!
  orders: [Order] @hasMany(indexName: "byUser", fields: ["id"])
  car: Car @hasOne(fields: ["id"])
}

type Car @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: String!
  latitude: Float
  longitude: Float
  heading: Float
  isActive: Boolean
  orders: [Order] @hasMany(indexName: "byCar", fields: ["id"])
  userId: ID! @index(name: "byUser")
  user: User @hasOne(fields: ["userId"])
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  createdAt: String!
  type: String!
  status: String
  originLatitude: Float!
  oreiginLongitude: Float!
  destLatitude: Float!
  destLongitude: Float!
  userId: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userId"])
  driverId: ID! @index(name: "byCar", sortKeyFields: ["createdAt"])
  car: Car @belongsTo(fields: ["driverId"])
}

type Subscription {
  onOrderUpdated(id: ID!): Order @aws_subscribe(mutations: ["updateOrder"])
  onCarUpdated(id: ID!): Car @aws_subscribe(mutations: ["updateCar"])
}
